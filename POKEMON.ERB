
@MINE_POKEMON_LIST
;所持しているポケモンをポケモンボックスのように
;1ページあたり30匹まで表示する関数、最大300までで
#DIM ポケモンリストナンバー
#DIM 文字空白数
#DIM ページナンバー
#DIM FIRST_LINE
#DIM 入力結果
#DIM P_ID
ポケモンリストナンバー = 0
文字空白数 = 0


$SHOW_LOOP
DRAWLINE
;PRINT これ空欄空列？なくなる
PRINTFORML 

ポケモンリストナンバー = 0

FOR LOCAL:0, 0, CHARANUM
        IF TALENT:(LOCAL:0):ポケモン
            ポケモンリストナンバー ++
            IF (ポケモンリストナンバー <= ((ページナンバー + 1)*30)) && (ポケモンリストナンバー > ((ページナンバー)*30))
                STRLENS CALLNAME:(LOCAL:0)
                文字空白数 = 19 - (RESULT:0)
                FOR (LOCAL:1), 0, 文字空白数
                    LOCALS:0 += " "
                NEXT    
                ;PRINTFORML {RESULT:0}
                IF ポケモンリストナンバー < 10
                    LOCALS:1 += "  "
                ELSEIF ポケモンリストナンバー < 100
                    LOCALS:1 += " "
                ENDIF
                PRINTBUTTON "["+TOSTR(ポケモンリストナンバー)+LOCALS:1+"]"+ CALLNAME:(LOCAL:0)+" "+"ID."+TOSTR(LOCAL:0),ポケモンリストナンバー
                PRINTFORM %LOCALS:0%
                LOCALS:0 = 
                LOCALS:1 = 
            ENDIF
        ENDIF
NEXT

;IF FIRST_LINE != 1

;PRINTL 
PRINTFORML 
PRINTFORML 

    DRAWLINE
;    FIRST_LINE = 1
;ELSE
;ENDIF

IF ページナンバー > 0
	PRINTBUTTON "[7777] 前のページ", 7777
ELSE
    PRINTFORM %TOSTR_SPACE(17)%
ENDIF
PRINTFORM %TOSTR_SPACE(20)%
PRINTFORM 現在のページ{ページナンバー}
PRINTFORM %TOSTR_SPACE(20)%

IF ページナンバー < 9
	PRINTBUTTON "[8888] 次のページ", 8888
ELSE

ENDIF

PRINTFORML 
PRINTFORM %TOSTR_SPACE(37)%
PRINTBUTTON "[9999] もどる", 9999

$INPUT_LOOP
INPUT

入力結果 = RESULT

IF 入力結果 == 9999
    RETURN 9999
ELSEIF 入力結果 == 8888
    ページナンバー += 1
    CLEARLINE LINECOUNT - FIRST_LINE
    GOTO SHOW_LOOP
ELSEIF 入力結果 == 7777
    ページナンバー -= 1
    CLEARLINE LINECOUNT - FIRST_LINE
    GOTO SHOW_LOOP
ELSEIF (入力結果 <= ((ページナンバー + 1)*30)) && (入力結果 > ((ページナンバー)*30))
    CALL POKEMON_ID(入力結果)
    P_ID = RESULT:0
    RETURN P_ID, 入力結果
ELSE
    GOTO INPUT_LOOP
ENDIF

;GOTO SHOW_LOOP

@POKEMON_ALL_STATUS
#DIM P_ID
#DIM 入力結果
$STATUS_LOOP

CALL MINE_POKEMON_LIST
P_ID = RESULT:0
入力結果 = RESULT:1

IF P_ID == 9999
	RETURN
ENDIF	

CALL POKEMON_STATUS_DETAIL(P_ID, 入力結果)
IF RESULT == 9999
	GOTO STATUS_LOOP
ENDIF	


@POKEMON_ID(対象ナンバー)
;すべてのキャラリストからポケモンだけを抽出し
;所持ポケモンの何番目にあたるポケモンか対象ナンバーに代入することで
;目的ポケモンのキャラIDを抽出する関数
#DIM ポケモンリストナンバー検証用
#DIM 対象ナンバー
#DIM P_ID

ポケモンリストナンバー検証用 = 0

FOR LOCAL:0, 0, CHARANUM
    IF TALENT:(LOCAL:0):ポケモン
        ポケモンリストナンバー検証用++
        IF ポケモンリストナンバー検証用 == 対象ナンバー
            P_ID = LOCAL:0
            BREAK
        ENDIF
    ENDIF
NEXT

;PRINTFORML {P_ID}

RETURN P_ID


@POKEMON_TYPENAME1(P_ID)
;目的ポケモンの持つ1つ目のタイプを文字列で返す関数
#FUNCTIONS
#DIM P_ID
    SIF TALENT:P_ID:タイプ1 == 1
        ARGS = ノーマル
    SIF TALENT:P_ID:タイプ1 == 2
        ARGS = ほのお
    SIF TALENT:P_ID:タイプ1 == 3
        ARGS = みず
    SIF TALENT:P_ID:タイプ1 == 4
        ARGS = でんき
    SIF TALENT:P_ID:タイプ1 == 5
        ARGS = くさ
    SIF TALENT:P_ID:タイプ1 == 6
        ARGS = こおり
    SIF TALENT:P_ID:タイプ1 == 7
        ARGS = かくとう
    SIF TALENT:P_ID:タイプ1 == 8
        ARGS = どく
    SIF TALENT:P_ID:タイプ1 == 9
       ARGS = じめん
    SIF TALENT:P_ID:タイプ1 == 10
        ARGS = ひこう
    SIF TALENT:P_ID:タイプ1 == 11
        ARGS = エスパー
    SIF TALENT:P_ID:タイプ1 == 12
        ARGS = むし
    SIF TALENT:P_ID:タイプ1 == 13
        ARGS = いわ
    SIF TALENT:P_ID:タイプ1 == 14
        ARGS = ゴースト
    SIF TALENT:P_ID:タイプ1 == 15
        ARGS = ドラゴン
    SIF TALENT:P_ID:タイプ1 == 16
        ARGS = あく
    SIF TALENT:P_ID:タイプ1 == 17
        ARGS = はがね
    SIF TALENT:P_ID:タイプ1 == 18
        ARGS = フェアリー

RETURNF ARGS

@POKEMON_TYPENAME2(P_ID)
;目的ポケモンの持つ2つ目のタイプを文字列で返す関数
#FUNCTIONS
#DIM P_ID
    SIF TALENT:P_ID:タイプ2 == 1
        ARGS = ノーマル
    SIF TALENT:P_ID:タイプ2 == 2
        ARGS = ほのお
    SIF TALENT:P_ID:タイプ2 == 3
        ARGS = みず
    SIF TALENT:P_ID:タイプ2 == 4
        ARGS = でんき
    SIF TALENT:P_ID:タイプ2 == 5
        ARGS =  くさ
    SIF TALENT:P_ID:タイプ2 == 6
        ARGS = こおり
    SIF TALENT:P_ID:タイプ2 == 7
        ARGS = かくとう
    SIF TALENT:P_ID:タイプ2 == 8
        ARGS = どく
    SIF TALENT:P_ID:タイプ2 == 9
       ARGS = じめん
    SIF TALENT:P_ID:タイプ2 == 10
        ARGS = ひこう
    SIF TALENT:P_ID:タイプ2 == 11
        ARGS = エスパー
    SIF TALENT:P_ID:タイプ2 == 12
        ARGS = むし
    SIF TALENT:P_ID:タイプ2 == 13
        ARGS = いわ
    SIF TALENT:P_ID:タイプ2 == 14
        ARGS = ゴースト
    SIF TALENT:P_ID:タイプ2 == 15
        ARGS = ドラゴン
    SIF TALENT:P_ID:タイプ2 == 16
        ARGS = あく
    SIF TALENT:P_ID:タイプ2 == 17
        ARGS = はがね
    SIF TALENT:P_ID:タイプ2 == 18
        ARGS = フェアリー

RETURNF ARGS

@GET_PERSONALITYNAME(P_ID)
;目的ポケモンの性格を文字列で返す関数
#FUNCTIONS
#DIM P_ID

SIF TALENT:P_ID:ポケモン性格 == 1
    ARGS = さみしがり
SIF TALENT:P_ID:ポケモン性格 == 2
    ARGS = いじっぱり
SIF TALENT:P_ID:ポケモン性格 == 3
    ARGS = やんちゃ
SIF TALENT:P_ID:ポケモン性格 == 4
    ARGS = ゆうかん
SIF TALENT:P_ID:ポケモン性格 == 5
    ARGS = 図太い
SIF TALENT:P_ID:ポケモン性格 == 6
    ARGS = わんぱく
SIF TALENT:P_ID:ポケモン性格 == 7
    ARGS = 能天気
SIF TALENT:P_ID:ポケモン性格 == 8
    ARGS = 呑気
SIF TALENT:P_ID:ポケモン性格 == 9
    ARGS = 控えめ
SIF TALENT:P_ID:ポケモン性格 == 10
    ARGS = おっとり
SIF TALENT:P_ID:ポケモン性格 == 11
    ARGS = うっかりや
SIF TALENT:P_ID:ポケモン性格 == 12
    ARGS = れいせい
SIF TALENT:P_ID:ポケモン性格 == 13
    ARGS = 穏やか
SIF TALENT:P_ID:ポケモン性格 == 14
    ARGS = おとなしい
SIF TALENT:P_ID:ポケモン性格 == 15
    ARGS = 慎重
SIF TALENT:P_ID:ポケモン性格 == 16
    ARGS = 生意気
SIF TALENT:P_ID:ポケモン性格 == 17
    ARGS = 臆病
SIF TALENT:P_ID:ポケモン性格 == 18
    ARGS = せっかち
SIF TALENT:P_ID:ポケモン性格 == 19
    ARGS = 陽気
SIF TALENT:P_ID:ポケモン性格 == 20
    ARGS = 無邪気
SIF TALENT:P_ID:ポケモン性格 == 21
    ARGS = 頑張り屋
SIF TALENT:P_ID:ポケモン性格 == 22
    ARGS = 素直
SIF TALENT:P_ID:ポケモン性格 == 23
    ARGS = 照れ屋
SIF TALENT:P_ID:ポケモン性格 == 24
    ARGS = 気まぐれ
SIF TALENT:P_ID:ポケモン性格 == 25
    ARGS = 照れ屋

RETURNF ARGS

@GET_POKEMON_CONDITIONS(P_ID)
#FUNCTIONS
#DIM P_ID
SIF CFLAG:P_ID:状態異常 == 1
	ARGS = まひ
SIF CFLAG:P_ID:状態異常 == 2
	ARGS = こおり
SIF CFLAG:P_ID:状態異常 == 3
	ARGS = やけど
SIF CFLAG:P_ID:状態異常 == 4
	ARGS = どく
SIF CFLAG:P_ID:状態異常 == 5
	ARGS = もうどく
SIF CFLAG:P_ID:状態異常 == 6
	ARGS = ねむり
SIF CFLAG:P_ID:状態異常 == 7
	ARGS = ねむけ
SIF CFLAG:P_ID:状態異常 == 8
	ARGS = ひんし
SIF CFLAG:P_ID:状態異常 == 9
	ARGS = しもやけ

RETURNF ARGS

@GET_POKEMON_SEX(P_ID)
#FUNCTIONS
#DIM P_ID

SIF TALENT:P_ID:ポケモン性別 == 1
    ARGS = ♂
SIF TALENT:P_ID:ポケモン性別 == 2
    ARGS = ♀

RETURNF ARGS

@POKEMON_STATUS_DETAIL(P_ID, 対象ナンバー)
;目的ポケモンの様々なステータスを表示する関数
#DIM P_ID
#DIM 対象ナンバー
#DIM ポケモンリストナンバー検証用
#DIM ポケモンリストナンバー検証用2

ポケモンリストナンバー検証用 = 0

DRAWLINE
PRINTFORML

PRINTFORML 　名　　前　：%CALLNAME:P_ID%
PRINTFORML 　レベル　　：{BASE:P_ID:ポケモンLV}
PRINTFORML 　図鑑No.　　 {TALENT:P_ID:全国図鑑No}
PRINTFORM 　性　　別　：
IF TALENT:P_ID:ポケモン性別 == 1
	PRINTFORML ♂
ELSEIF TALENT:P_ID:ポケモン性別 == 2
	PRINTFORML ♀
ELSE
ENDIF

PRINTFORML 　タイプ１　：%POKEMON_TYPENAME1(P_ID)%
PRINTFORML 　タイプ２　：%POKEMON_TYPENAME2(P_ID)%

PRINTFORML 　親　　　　：%CALLNAME:(TALENT:P_ID:ポケモン親)%

PRINTFORML 　ID　　　　 .{P_ID}

PRINTFORML
PRINTFORML 　ＨＰ　:{MAXBASE:P_ID:HP}
PRINTFORML 　攻撃　:{MAXBASE:P_ID:攻撃}
PRINTFORML 　防御　:{MAXBASE:P_ID:防御}
PRINTFORML 　特攻　:{MAXBASE:P_ID:特攻}
PRINTFORML 　特防　:{MAXBASE:P_ID:特防}
PRINTFORML 　素早さ:{MAXBASE:P_ID:素早さ}
PRINTFORML


PRINTFORML 　性　　格　：%GET_PERSONALITYNAME(P_ID)%

PRINTFORM 　特　　性　：
FOR LOCAL:0, 600, 700
    IF TALENT:P_ID:(LOCAL:0) == 1
        PRINTFORM %TALENTNAME:(LOCAL:0)%
    ENDIF
NEXT
PRINTFORML
PRINTFORML 　現在の経験値：{BASE:P_ID:合計獲得経験値}
CALL POKEMON_LVUP(P_ID)


PRINT
DRAWLINE
PRINT
PRINTFORML 


FOR LOCAL:0, 0, CHARANUM
    IF TALENT:(LOCAL:0):ポケモン
        ポケモンリストナンバー検証用++
        IF ポケモンリストナンバー検証用 == 対象ナンバー
            ポケモンリストナンバー検証用2 = 対象ナンバー
        ENDIF
    ENDIF
NEXT


IF ポケモンリストナンバー検証用2 != 1
    PRINTBUTTON "[7777] 前のキャラ", 7777
    PRINTFORM %TOSTR_SPACE(17)%
ELSE
    PRINTFORM %TOSTR_SPACE(34)%
ENDIF

PRINTBUTTON "[9999] もどる", 9999

IF ポケモンリストナンバー検証用2 != ポケモンリストナンバー検証用
    PRINTFORM %TOSTR_SPACE(17)%
    PRINTBUTTON "[8888] 次のキャラ", 8888
ELSE
ENDIF
PRINTFORML 
PRINTFORML 

$INPUT_LOOP
INPUT

IF RESULT == 9999
;    CALL POKEMON_GET_EXPERIENCE(P_ID, P_ID)
	RETURN 9999
ELSEIF RESULT == 8888
    CALL POKEMON_ID(対象ナンバー + 1)
    CALL POKEMON_STATUS_DETAIL(RESULT:0,対象ナンバー + 1)
ELSEIF RESULT == 7777
    CALL POKEMON_ID(対象ナンバー - 1)
    CALL POKEMON_STATUS_DETAIL(RESULT:0,対象ナンバー - 1)
ELSE
    GOTO INPUT_LOOP
ENDIF

@POKEMON_GET_EXPERIENCE(P_ID,P_ID2)
#DIM P_ID  ;自分のポケモン
#DIM P_ID2 ;相手のポケモン
#DIM P_EXP
#DIM レベル補正
#DIM レベル補正関係値

POWER レベル補正関係値, (100*((2 * BASE:P_ID2:ポケモンLV) + 10)/((BASE:P_ID2:ポケモンLV + BASE:P_ID:ポケモンLV)+10)), 2
レベル補正 = (レベル補正関係値 * SQRT((100*((2 * BASE:P_ID2:ポケモンLV) + 10)/((BASE:P_ID2:ポケモンLV + BASE:P_ID:ポケモンLV)+10)))) / 10

;IF レベル補正 == 0

;PRINTFORML レベル補正は{レベル補正}だよーん

P_EXP = (((BASE:P_ID2:基礎経験値) * レベル補正)/20000 + 1)

BASE:P_ID:合計獲得経験値 += P_EXP
PRINTFORML 　%CALLNAME:P_ID%は{P_EXP}の経験値を得た
CALL POKEMON_LVUP(P_ID)

@POKEMON_LVUP(P_ID)
#DIM P_ID
#DIM 必要経験値
#DIM LEVEL1
#DIM LEVEL2
#DIM LEVEL3
#DIM LEVEL4

必要経験値 = 0

LEVEL1 = BASE:P_ID:ポケモンLV
LEVEL4 = BASE:P_ID:ポケモンLV + 1
POWER LEVEL2, (BASE:P_ID:ポケモンLV+1), 2
POWER LEVEL3, (BASE:P_ID:ポケモンLV+1), 3

IF TALENT:P_ID:経験値タイプ == 1
    IF LEVEL1 >= 2 && LEVEL1 < 50
        必要経験値 =  (LEVEL3 * (100 - LEVEL4) / 50)
    ELSEIF LEVEL1 >= 50 && LEVEL1 < 68
        必要経験値 =  (LEVEL3 * (150 - LEVEL4) / 100)
    ELSEIF LEVEL1 >= 68 && LEVEL1 < 98
        必要経験値 =  (LEVEL3 * (637 - (10 * LEVEL4 /3)) / 500)    
    ELSEIF LEVEL1 >= 98 && LEVEL1 <= 100
        必要経験値 =  (LEVEL3 * (160-LEVEL4) / 100)
    ENDIF

ELSEIF TALENT:P_ID:経験値タイプ == 2
    必要経験値 =  (LEVEL3 * 8)/10
ELSEIF TALENT:P_ID:経験値タイプ == 3
    必要経験値 =  LEVEL3
ELSEIF TALENT:P_ID:経験値タイプ == 4
    必要経験値 =  ((LEVEL3 * 12 / 10) - (15 * LEVEL2) +(100 * LEVEL4) -140)
ELSEIF TALENT:P_ID:経験値タイプ == 5
    必要経験値 = LEVEL3 * 125 / 100    
ELSEIF TALENT:P_ID:経験値タイプ == 6
    IF LEVEL1 >= 2 && LEVEL1 < 15
        必要経験値 = (LEVEL3 * (24 +((LEVEL4 + 1) / 3)) / 50)
    ELSEIF LEVEL1 >= 15 && LEVEL1 < 36
        必要経験値 = (LEVEL3 * (14 + LEVEL4) / 50)
    ELSEIF LEVEL1 >= 36 && LEVEL1 < 100
        必要経験値 = (LEVEL3 * (32 +(LEVEL4 / 2)) / 50)
    ENDIF
ENDIF

SIF LEVEL1 == 1
    必要経験値 = 1


IF BASE:P_ID:合計獲得経験値 >= 必要経験値
    BASE:P_ID:ポケモンLV += 1
    PRINTFORML    
    PRINTFORML 　%CALLNAME:P_ID%はレベルアップして、LV.{BASE:P_ID:ポケモンLV}になった！！
    PRINTFORML
    PRINTFORML 　ＨＰ　:{MAXBASE:P_ID:HP}
    PRINTFORML 　攻撃　:{MAXBASE:P_ID:攻撃}
    PRINTFORML 　防御　:{MAXBASE:P_ID:防御}
    PRINTFORML 　特攻　:{MAXBASE:P_ID:特攻}
    PRINTFORML 　特防　:{MAXBASE:P_ID:特防}
    PRINTFORML 　素早さ:{MAXBASE:P_ID:素早さ}
    PRINTFORML
    CALL POKEMON_LVUP(P_ID)
    CALL STATUS_POKEMON_Calculator(P_ID)
    PRINTFORML 　　→　ＨＰ　:{MAXBASE:P_ID:HP}
    PRINTFORML 　　→　攻撃　:{MAXBASE:P_ID:攻撃}
    PRINTFORML 　　→　防御　:{MAXBASE:P_ID:防御}
    PRINTFORML 　　→　特攻　:{MAXBASE:P_ID:特攻}
    PRINTFORML 　　→　特防　:{MAXBASE:P_ID:特防}
    PRINTFORML 　　→　素早さ:{MAXBASE:P_ID:素早さ}
    PRINTFORML

ELSE
    PRINTFORML 　次のレベルまで、あと{必要経験値 - BASE:P_ID:合計獲得経験値}
    PRINTFORML
ENDIF


RETURN 必要経験値

;--------------------------------------------
@ADD_POKEMON(ARG,形式)
#DIM P_ID
#DIM 形式;0捕獲、1バトル、2交換
#DIM 性別偏差
;--------------------------------------------
ADDCHARA ARG

P_ID == CHARANUM - 1

;ここから下は仮につくる、ゲットした際、交換した際に決められる
IF 形式 == 0
    TALENT:P_ID:主人公の手持ち = 1
    TALENT:P_ID:ポケモン親 = MASTER
ENDIF

IF TALENT:P_ID:ポケモン特殊性別

ELSE
    性別偏差 = RAND(1001)
    IF 性別偏差 <= TALENT:P_ID:性別割合
        TALENT:P_ID:ポケモン性別 = 1
    ELSE
        TALENT:P_ID:ポケモン性別 = 2
    ENDIF
	;TALENT:P_ID:ポケモン性別 == RAND(1, 3)
ENDIF

PRINTFORML ニックネームをつけますか
CALL ASK_YN("はい","いいえ")
IF !RESULT
	$INPUT_LOOP_ONAMAE
	PRINTL 名前を入力してください
	INPUTS
	LOCALS = %RESULTS%
	IF STRLENS(LOCALS) > 6
		CLEARLINE 1
		PRINTFORML 名前は6文字までです
		GOTO INPUT_LOOP_ONAMAE
	ENDIF
	PRINTFORML 「%RESULTS%…でよろしいですか」
	PRINTL [0] はい
	PRINTL [1] いいえ
	INPUT
	IF RESULT == 0
		CALLNAME:(P_ID) = %RESULTS%
		PRINTFORML 
	ELSEIF RESULT == 1
		GOTO INPUT_LOOP_ONAMAE
	ELSE
		GOTO INPUT_LOOP_ONAMAE
	ENDIF
ELSE

ENDIF


BASE:P_ID:個体値H == RAND(0, 32)
BASE:P_ID:個体値A == RAND(0, 32)
BASE:P_ID:個体値B == RAND(0, 32)
BASE:P_ID:個体値C == RAND(0, 32)
BASE:P_ID:個体値D == RAND(0, 32)
BASE:P_ID:個体値S == RAND(0, 32)

TALENT:P_ID:ポケモン性格 == RAND(1, 26)

PRINTFORML %NAME:P_ID%に{BASE:P_ID:個体値H}を追加して、性格は{TALENT:P_ID:ポケモン性格}にしたよ
CALL STATUS_POKEMON_Calculator(P_ID)
	

;--------------------------------------------
@STATUS_POKEMON_Calculator(P_ID)
#DIM P_ID
#DIM ポケモン性格
;--------------------------------------------

MAXBASE:P_ID:HP == ((((BASE:P_ID:種族値H*2) + (BASE:P_ID:個体値H) + ((BASE:P_ID:努力値H)/4)) * (BASE:P_ID:ポケモンLV) + 1000 + (BASE:P_ID:ポケモンLV * 100)) / 100)

MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 100 ) / 10000)
MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 100 ) / 10000)
MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 100 ) / 10000)
MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 100 ) / 10000)
MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 100 ) / 10000)

ポケモン性格 = TALENT:P_ID:ポケモン性格

;PRINTFORML ここでは%GET_PERSONALITYNAME(P_ID)%だよ

IF ポケモン性格 == 1
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)
	
ELSEIF ポケモン性格 == 2
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 3
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 4
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 5
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 6
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 7
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 8
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 9
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 10
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 11
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 12
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 13
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 14
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 15
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 16
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 17
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:攻撃 == (((((BASE:P_ID:種族値A*2) + (BASE:P_ID:個体値A) + ((BASE:P_ID:努力値A)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 18
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:防御 == (((((BASE:P_ID:種族値B*2) + (BASE:P_ID:個体値B) + ((BASE:P_ID:努力値B)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 19
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特攻 == (((((BASE:P_ID:種族値C*2) + (BASE:P_ID:個体値C) + ((BASE:P_ID:努力値C)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSEIF ポケモン性格 == 20
	MAXBASE:P_ID:素早さ == (((((BASE:P_ID:種族値S*2) + (BASE:P_ID:個体値S) + ((BASE:P_ID:努力値S)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 110 ) / 10000)
	MAXBASE:P_ID:特防 == (((((BASE:P_ID:種族値D*2) + (BASE:P_ID:個体値D) + ((BASE:P_ID:努力値D)/4)) * (BASE:P_ID:ポケモンLV) + 500 ) * 90 ) / 10000)

ELSE

ENDIF

BASE:P_ID:HP = MAXBASE:P_ID:HP
BASE:P_ID:攻撃 = MAXBASE:P_ID:攻撃
BASE:P_ID:防御 = MAXBASE:P_ID:防御
BASE:P_ID:特攻 = MAXBASE:P_ID:特攻
BASE:P_ID:特防 = MAXBASE:P_ID:特防
BASE:P_ID:素早さ = MAXBASE:P_ID:素早さ


;PRINTFORML %NAME:P_ID%を{MAXBASE:P_ID:HP}へ


;--------------------------------------------
@POKEMON_MEMBER_CHANGE
#DIM P_ID
#DIM 空データ用1
#DIM データ用1
#DIM 空データ用2
#DIM データ用2
#DIM 空データ用3
#DIM データ用3
#DIM 空データ用4
#DIM データ用4
#DIM 空データ用5
#DIM データ用5
#DIM 空データ用6
#DIM データ用6
;--------------------------------------------
$MEMEBER_CHANGE_LOOP

データ用1 = 0
データ用2 = 0
データ用3 = 0
データ用4 = 0
データ用5 = 0
データ用6 = 0


FOR LOCAL, 0, CHARANUM
	IF TALENT:LOCAL:手持ち順番 == 6
		データ用6 = LOCAL
	ELSEIF TALENT:LOCAL:手持ち順番 == 5
		データ用5 = LOCAL
	ELSEIF TALENT:LOCAL:手持ち順番 == 4
		データ用4 = LOCAL
	ELSEIF TALENT:LOCAL:手持ち順番 == 3
		データ用3 = LOCAL
	ELSEIF TALENT:LOCAL:手持ち順番 == 2
		データ用2 = LOCAL
	ELSEIF TALENT:LOCAL:手持ち順番 == 1
		データ用1 = LOCAL
	ENDIF	
NEXT

	IF データ用5 == 0
		FOR LOCAL:1, 0, CHARANUM
			IF TALENT:(LOCAL:1):手持ち順番 == 6
				TALENT:(LOCAL:1):手持ち順番 == 5
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		NEXT				
	ENDIF
	IF データ用4 == 0
		FOR LOCAL:1, 0, CHARANUM
			IF TALENT:(LOCAL:1):手持ち順番 == 5
				TALENT:(LOCAL:1):手持ち順番 == 4
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF		
		NEXT	
	ENDIF
	IF データ用3 == 0
		FOR LOCAL:1, 0, CHARANUM
			IF TALENT:(LOCAL:1):手持ち順番 == 4
				TALENT:(LOCAL:1):手持ち順番 == 3
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		NEXT				
	ENDIF
	IF データ用2 == 0
		FOR LOCAL:1, 0, CHARANUM
			IF TALENT:(LOCAL:1):手持ち順番 == 3
				TALENT:(LOCAL:1):手持ち順番 == 2
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		NEXT				
	ENDIF
	IF データ用1 == 0
		FOR LOCAL:1, 0, CHARANUM
			IF TALENT:(LOCAL:1):手持ち順番 == 2
				TALENT:(LOCAL:1):手持ち順番 == 1
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		NEXT				
	ENDIF



FOR P_ID, 0, CHARANUM
	IF TALENT:P_ID:手持ち順番 == 1
		PRINTFORM [1] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用1 = 1
		データ用1 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用1
	PRINTFORML [1] - なし
ENDIF


FOR P_ID, 0,CHARANUM
	IF TALENT:P_ID:手持ち順番 == 2
		PRINTFORM [2] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用2 = 1
		データ用2 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用2
	PRINTFORML [2] - なし
ENDIF

FOR P_ID, 0,CHARANUM
	IF TALENT:P_ID:手持ち順番 == 3
		PRINTFORM [3] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用3 = 1
		データ用3 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用3
	PRINTFORML [3] - なし
ENDIF

FOR P_ID, 0,CHARANUM
	IF TALENT:P_ID:手持ち順番 == 4
		PRINTFORM [4] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用4 = 1
		データ用4 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用4
	PRINTFORML [4] - なし
ENDIF

FOR P_ID, 0,CHARANUM
	IF TALENT:P_ID:手持ち順番 == 5
		PRINTFORM [5] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用5 = 1
		データ用5 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用5
	PRINTFORML [5] - なし
ENDIF

FOR P_ID, 0,CHARANUM
	IF TALENT:P_ID:手持ち順番 == 6
		PRINTFORM [6] - %CALLNAME:P_ID% LV.{BASE:P_ID:ポケモンLV}
		IF TALENT:P_ID:ポケモン性別 == 1
			;SETCOLOR C_AQUA
			PRINTFORM 　♂
			;RESETCOLOR
		ELSEIF TALENT:P_ID:ポケモン性別 == 2
			;SETCOLOR C_RED
			PRINTFORM 　♀
			;RESETCOLOR
		ELSE
		ENDIF
		PRINTFORML 　ID.{P_ID}
		空データ用6 = 1
		データ用6 = P_ID
	ELSE
	ENDIF
NEXT

IF !空データ用6
	PRINTFORML [6] - なし
ENDIF

PRINTFORML 
PRINTFORML [9999] - やめる
DO
	INPUT
	SELECTCASE RESULT
	CASE 1
		IF !空データ用1
            CALL MINE_POKEMON_LIST
			IF RESULT:0 == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 1
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 1
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 2
		IF !空データ用2
            CALL MINE_POKEMON_LIST
			IF RESULT == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 2
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 2
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 3
		IF !空データ用3
            CALL MINE_POKEMON_LIST
			IF RESULT == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 3
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 3
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 4
		IF !空データ用4
            CALL MINE_POKEMON_LIST
			IF RESULT == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 4
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 4
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 5
		IF !空データ用5
            CALL MINE_POKEMON_LIST
			IF RESULT == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 5
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 5
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 6
		IF !空データ用6
            CALL MINE_POKEMON_LIST
			IF RESULT == 9999
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
            ELSE
                P_ID = RESULT:0
                TALENT:P_ID:手持ち順番 == 6
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
				GOTO MEMEBER_CHANGE_LOOP
			ENDIF
		ELSE
			FOR LOCAL, 0, CHARANUM
				IF TALENT:LOCAL:手持ち順番 == 6
					TALENT:LOCAL:手持ち順番 == 0
				ENDIF
			NEXT
				空データ用1 = 0
				空データ用2 = 0
				空データ用3 = 0
				空データ用4 = 0
				空データ用5 = 0
				空データ用6 = 0
			GOTO MEMEBER_CHANGE_LOOP
		ENDIF

	CASE 9999
		RETURN
	ENDSELECT
LOOP 1



